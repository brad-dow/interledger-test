{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the icanhazdadjoke API!","text":"<p>Whether you are a new dad looking to build a foundation of bad jokes or you are a seasoned professional, the icanhazdadjoke API provides access to the best (perhaps the worst) dad jokes and puns you've ever heard. </p> <p>I'm excited (nice to meet you excited, I'm dad) to share with you the core capabilities of this API:</p> <ul> <li>Retrieve a random dad joke</li> <li>Retrieve a random dad joke, formatted for Slack</li> <li>Retrieve a dad joke by ID</li> <li>Retrieve a dad joke as an image</li> <li>Search for dad jokes</li> </ul>"},{"location":"oas/","title":"API reference","text":""},{"location":"oas/#getting-started","title":"Getting started","text":""},{"location":"oas/#authentication","title":"Authentication","text":"<p>This API is a free, public resource that requires no API keys or additional credentials.</p>"},{"location":"oas/#request-headers","title":"Request headers","text":"<p>The <code>Accept</code> HTTP header communicates the type of media that should be in the response. Valid values include:</p> <ul> <li><code>text/html</code></li> <li><code>application/json</code></li> <li><code>text/plain</code></li> </ul> <p>The <code>User-Agent</code> header informs the API who is making the API requests and is required in order to use the icanhazdadjoke API.</p>"},{"location":"oas/#icanhazdadjoke-api-openapi-30","title":"icanhazdadjoke API - OpenAPI 3.0","text":"<p>Looking for some dad jokes? You've come to the right place!</p> Contact:  bradley.s.dow@gmail.com"},{"location":"oas/#servers","title":"Servers","text":"Description URL Production server https://icanhazdadjoke.com"},{"location":"oas/#endpoints","title":"Endpoints","text":""},{"location":"oas/#get-search","title":"GET /search","text":"<p>Search dad jokes</p> Description <p>Retrieve one or more dad jokes that meet the search criteria.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>limit</code> query integer No Number of results to return per page - If not specified, 20 results are returned by default (maximum of 30) <code>page</code> query integer No Page number of results to retrieve - Works in tandem with the limit parameter <code>term</code> query string No Search term - If not specified, all jokes are retrieved <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"current_page\": 1,\n    \"limit\": 20,\n    \"next_page\": 1,\n    \"previous_page\": 1,\n    \"results\": [\n        {\n            \"id\": \"OCtWnGJtPuc\",\n            \"joke\": \"Why is the new Kindle screen textured to look like paper? So you feel write at home.\"\n        },\n        {\n            \"id\": \"O7haxA5Tfxc\",\n            \"joke\": \"Where do cats write notes? Scratch Paper!\"\n        },\n        {\n            \"id\": \"EYo4TCAdUf\",\n            \"joke\": \"I tried to write a chemistry joke, but could never get a reaction.\"\n        },\n        {\n            \"id\": \"SvPRCIeiNuc\",\n            \"joke\": \"How does a dyslexic poet write? Inverse.\"\n        }\n    ],\n    \"search_term\": \"write\",\n    \"status\": 200,\n    \"total_jokes\": 4,\n    \"total_pages\": 1\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"current_page\": {\n            \"type\": \"integer\",\n            \"example\": 1\n        },\n        \"limit\": {\n            \"type\": \"integer\",\n            \"example\": 20\n        },\n        \"next_page\": {\n            \"type\": \"integer\",\n            \"example\": 1\n        },\n        \"previous_page\": {\n            \"type\": \"integer\",\n            \"example\": 1\n        },\n        \"results\": {\n            \"$ref\": \"#/components/schemas/jokesArray\"\n        },\n        \"search_term\": {\n            \"type\": \"string\",\n            \"example\": \"write\"\n        },\n        \"status\": {\n            \"type\": \"integer\",\n            \"example\": 200\n        },\n        \"total_jokes\": {\n            \"type\": \"integer\",\n            \"example\": 4\n        },\n        \"total_pages\": {\n            \"type\": \"integer\",\n            \"example\": 1\n        }\n    }\n}\n</code></pre>"},{"location":"oas/#schemas","title":"Schemas","text":""},{"location":"oas/#jokes","title":"jokes","text":"Name Type <code>id</code> integer <code>joke</code> string"},{"location":"oas/#jokesarray","title":"jokesArray","text":"<p>Type: Array&lt;jokes&gt;</p>"},{"location":"oas/#searchresults","title":"searchResults","text":"Name Type <code>current_page</code> integer <code>limit</code> integer <code>next_page</code> integer <code>previous_page</code> integer <code>results</code> jokesArray <code>search_term</code> string <code>status</code> integer <code>total_jokes</code> integer <code>total_pages</code> integer"},{"location":"tutorial/","title":"Searching for jokes","text":"<p>We've all been there. The opportunity presents itself for a perfectly timed dad joke to provoke eye rolls and heavy sighs. The only problem is...you can't think of one. It's tough coming up with a joke in the heat of the moment!</p> <p>Enter the icanhazdadjoke API! In this tutorial, we'll take a look at how to search for that perfect dad joke. By the end of this guide, you will know how to:</p> <ul> <li>Find one or more dad jokes with a simple keyword search</li> <li>Alter the response format</li> <li>Use pagination parameters to manage the response</li> </ul>"},{"location":"tutorial/#search-for-a-dad-joke","title":"Search for a dad joke","text":"<p>Use the icanhazdadjoke API's search endpoint to retrieve a list of dad jokes that meet a specified query term. Configure the <code>term</code> parameter to the desired search criteria.</p> <p>HTTP method: GET</p> <p>Endpoint: /search</p> <p>Query string parameter: <code>term</code></p> <p>In the example below, let's search for a dad joke that contains the word \"write\". Pay attention to the following three things we've configured in this cURL request:</p> <ul> <li><code>Accept</code> request header is set to <code>application/json</code></li> <li><code>User-Agent</code> request header is set to appropriately identify who is making the request</li> <li>Search <code>term</code> value is set to \"write\" </li> </ul> <p>Sample request</p> <pre><code>$curl -H \"Accept: application/json\" -H \"User-Agent: ILF Test (bradley.s.dow@gmail.com)\" https://icanhazdadjoke.com/search?term=write\n</code></pre> <p>The JSON response for our example request contains four dad jokes in a <code>results</code> array that meet our search criteria. The response also contains the number of search results, pagination data, our original search term, and the HTTP status returned.</p> <p>Sample response <pre><code>{\n    \"current_page\": 1,\n    \"limit\": 20,\n    \"next_page\": 1,\n    \"previous_page\": 1,\n    \"results\": [\n        {\n            \"id\": \"OCtWnGJtPuc\",\n            \"joke\": \"Why is the new Kindle screen textured to look like paper? So you feel write at home.\"\n        },\n        {\n            \"id\": \"O7haxA5Tfxc\",\n            \"joke\": \"Where do cats write notes? Scratch Paper!\"\n        },\n        {\n            \"id\": \"EYo4TCAdUf\",\n            \"joke\": \"I tried to write a chemistry joke, but could never get a reaction.\"\n        },\n        {\n            \"id\": \"SvPRCIeiNuc\",\n            \"joke\": \"How does a dyslexic poet write? Inverse.\"\n        }\n    ],\n    \"search_term\": \"write\",\n    \"status\": 200,\n    \"total_jokes\": 4,\n    \"total_pages\": 1\n}\n</code></pre></p>"},{"location":"tutorial/#response-formats","title":"Response formats","text":"<p>Our request example above set the <code>Accept</code> header to <code>application/json</code> and the corresponding response was returned in JSON format.</p> <p>In the example below, let's use the same request as before but instead of a JSON response, we'd rather have it in a plain text output. Change the <code>Accept</code> header to <code>text/plain</code>.</p> <p>Sample request</p> <pre><code>$curl -H \"Accept: text/plain\" -H \"User-Agent: ILF Test (bradley.s.dow@gmail.com)\" https://icanhazdadjoke.com/search?term=write\n</code></pre> <p>Instead of the complex JSON response as before, now we have a simple, plain text response.</p> <p>Sample response</p> <pre><code>How does a dyslexic poet write? Inverse.\nI tried to write a chemistry joke, but could never get a reaction.\nWhy is the new Kindle screen textured to look like paper? So you feel write at home.\nWhere do cats write notes? Scratch Paper!\n</code></pre> <p>Supported <code>Accept</code> headers</p> <p>The icanhazdadjoke API supports the following <code>Accept</code> headers:</p> <ul> <li>application/json</li> <li>text/plain</li> <li>text/html</li> </ul>"},{"location":"tutorial/#pagination-parameters","title":"Pagination parameters","text":"<p>As the database of dad jokes continues to increase at a rapid pace, it's important to handle the search results in an elegant manner. If you query the <code>/search</code> endpoint without setting a search <code>term</code>, the response contains every dad joke available. By default, the search results are limited to 20 dad jokes per page with the first page of results being displayed.</p> <p>Maximum <code>limit</code> value</p> <p>The maximum value for <code>limit</code> is 30 search results.</p> <p>In the example below, let's omit our search criteria to retrieve the maximum amount of dad jokes. We will set the following pagination parameters:</p> <ul> <li><code>limit</code> is set to \"5\" results</li> <li><code>page</code> is set to \"2\", to return the second page of 30 results</li> </ul> <p>Sample request</p> <pre><code>$curl -H \"Accept: application/json\" -H \"User-Agent: ILF Test (bradley.s.dow@gmail.com)\" https://icanhazdadjoke.com/search?limit=5&amp;page=2\n</code></pre> <p>Without a search criteria specified, he JSON response shows the total number of jokes as 744. Since we set a <code>limit</code> of \"5\", we see our five dad jokes in the <code>results</code> array. Because we set our <code>page</code> to \"2\", we can see that the <code>current_page</code> is \"2\". Since there are 744 jokes total and we are limiting our response to five jokes per page, all of the jokes would be spread across 149 pages.</p> <p>Sample response <pre><code>{\n    \"current_page\": 2,\n    \"limit\": 5,\n    \"next_page\": 3,\n    \"previous_page\": 1,\n    \"results\": [\n        {\n            \"id\": \"0DdaxAX0orc\",\n            \"joke\": \"I accidentally took my cats meds last night. Don\u2019t ask meow.\"\n        },\n        {\n            \"id\": \"0DtrrOZDlyd\",\n            \"joke\": \"Chances are if you' ve seen one shopping center, you've seen a mall.\"\n        },\n        {\n            \"id\": \"0L6MexPukjb\",\n            \"joke\": \"Dermatologists are always in a hurry. They spend all day making rash decisions. \"\n        },\n        {\n            \"id\": \"0LuXvkq4Muc\",\n            \"joke\": \"I knew I shouldn't steal a mixer from work, but it was a whisk I was willing to take.\"\n        },\n        {\n            \"id\": \"0gFdFBsWDd\",\n            \"joke\": \"I won an argument with a weather forecaster once. His logic was cloudy...\"\n        }\n    ],\n    \"search_term\": \"\",\n    \"status\": 200,\n    \"total_jokes\": 744,\n    \"total_pages\": 149\n}\n</code></pre></p>"}]}